#!/bin/bash

[ -z "${DIRENV_DEBUG:-}" ] || set -x

# Copy of stdlib's `__dump_at_exit`, but logs on failure
# https://github.com/direnv/direnv/issues/893
__my_dump_at_exit() {
    local ret=$?
    [[ $ret == 0 ]] || echo -e "\033[31mDIRENV FAILED! To debug: export DIRENV_DEBUG=1\033[0m" >&2
    # shellcheck disable=SC2154
    "$direnv" dump json "" >&3
    trap - EXIT
    exit "$ret"
}
trap __my_dump_at_exit EXIT

layout_auto() {
    if [[ -f go.mod ]]; then
        layout go
    fi
    if [[ -f package.json ]]; then
        use nodejs
        layout nodejs
    fi
    if [[ -f poetry.lock ]]; then
        use python
        layout poetry
    fi
    if [[ -f pdm.lock ]]; then
        layout pdm
    fi
    dotenv_if_exists
}

### Go ###

layout_go() {
    export GOBIN="$PWD/bin"
    PATH_add bin
}

### Java ###

use_java() {
    # Get version and location
    version_file=.java-version
    version=${1:-$(cat $version_file 2>/dev/null || true)}
    log_status "using version ${version:-default}"
    [ -z "$version" ] && return # no version specified, use default
    version="openjdk@1.$version"
    # shellcheck disable=SC2153
    prefix="$JABBA_HOME/jdk/$version/Contents/Home"

    # Install and load it
    [ -d "$prefix" ] || jabba install "$version"
    export JAVA_HOME="$prefix"
    load_prefix "$prefix"
    watch_file $version_file
}

### Node ###

use_nodejs() {
    # Get version and location
    version_file=.nvmrc
    version=${1:-$(cat $version_file 2>/dev/null || true)}
    log_status "using version ${version:-default}"
    [ -z "$version" ] && return # no version specified, use default
    prefix="$FNM_DIR/node-versions/v${version#v}/installation"

    # Install and load it
    [ -d "$prefix" ] || fnm install "$version"
    load_prefix "$prefix"
    watch_file $version_file
}

layout_nodejs() {
    PATH_add node_modules/.bin

    # Install, if deps are outdated
    if [[ -f package-lock.json && package-lock.json -nt node_modules/.package-lock.json ]]; then
        npm install
    elif [[ -f yarn.lock && yarn.lock -nt node_modules ]]; then
        yarn install
    fi
    watch_file package-lock.json yarn.lock
}

### Python ###

use_python() {
    # Get version and location
    version_file=.python-version
    version=${1:-$(cat $version_file 2>/dev/null || true)}
    log_status "using version ${version:-default}"
    [ -z "$version" ] && return # no version specified, use default
    prefix="$PYENV_ROOT/versions/$version"

    # Install and load it
    [ -d "$prefix" ] || pyenv install "$version"
    load_prefix "$prefix"
    watch_file $version_file
}

layout_poetry() {
    # Install, if deps are outdated
    if [[ ! -d .venv || poetry.lock -nt "$(echo .venv/lib/python*/site-packages)" ]]; then
        poetry install
    fi
    watch_file poetry.lock

    # Activate venv
    export VIRTUAL_ENV="$PWD/.venv"
    export POETRY_ACTIVE=1
    PATH_add "$VIRTUAL_ENV/bin"

    # Update pip and friends, every week
    pip="$VIRTUAL_ENV/bin/pip"
    now=$(date +%s)
    modified_at=$(date -r "$pip" +%s)
    if [[ -x "$pip" && $((now - modified_at)) -gt $((60 * 60 * 24 * 7)) ]]; then
        $pip install --upgrade pip setuptools wheel
        touch "$pip" # NOTE: ensure mtime is updated
    fi
}

layout_pdm() {
    # Install, if deps are outdated
    if [[ ! -d __pypackages__ || pdm.lock -nt "$(echo __pypackages__/*/lib)" ]]; then
        pdm install
    fi
    watch_file pdm.lock

    # Activate PEP 582 (faster equivalent to `pdm --pep582`)
    path_add PYTHONPATH "$HOMEBREW_PREFIX"/opt/pdm/libexec/lib/python*/site-packages/pdm/pep582
    PATH_add "$PWD"/__pypackages__/*/bin
}

### Main ###

layout auto
