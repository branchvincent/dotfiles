#!/bin/bash

layout_auto() {
    [ -f go.mod ] && layout go
    [ -f package.json ] && use nodejs && layout node
    [ -f poetry.lock ] && use python && layout poetry
    [ -f pdm.lock ] && layout pdm
    dotenv_if_exists
}

### Go ###

layout_go() {
    export GOBIN="$PWD/bin"
    PATH_add bin
}

### Java ###

use_java() {
    # Get version and location
    version_file=.java-version
    version=${1:-$(cat $version_file 2>/dev/null)}
    log_status "using version ${version:-default}"
    [ -z "$version" ] && return # no version specified, use default
    version="openjdk@1.$version"
    # shellcheck disable=SC2153
    prefix="$JABBA_HOME/jdk/$version/Contents/Home"

    # Install and load it
    [ -d "$prefix" ] || jabba install "$version"
    export JAVA_HOME="$prefix"
    load_prefix "$prefix"
    watch_file $version_file
}

### Node ###

use_nodejs() {
    # Get version and location
    version_file=.nvmrc
    version=${1:-$(cat $version_file 2>/dev/null)}
    log_status "using version ${version:-default}"
    [ -z "$version" ] && return # no version specified, use default
    prefix="$FNM_DIR/node-versions/$version/installation"

    # Install and load it
    [ -d "$prefix" ] || fnm install "$version"
    load_prefix "$prefix"
    watch_file $version_file
}

### Python ###

use_python() {
    # Get version and location
    version_file=.python-version
    version=${1:-$(cat $version_file 2>/dev/null)}
    log_status "using version ${version:-default}"
    [ -z "$version" ] && return # no version specified, use default
    prefix="$PYENV_ROOT/versions/$version"

    # Install and load it
    [ -d "$prefix" ] || pyenv install "$version"
    load_prefix "$prefix"
    watch_file $version_file
}

layout_poetry() {
    # Activate venv
    export VIRTUAL_ENV="$PWD/.venv"
    export POETRY_ACTIVE=1
    PATH_add "$VIRTUAL_ENV/bin"

    # Create venv, if needed
    [ -d "$VIRTUAL_ENV" ] || poetry install

    # Update pip and friends, every week
    now=$(date +%s)
    modified_at=$(date -r "$(which pip)" +%s)
    if [ $((now - modified_at)) -gt $((60 * 60 * 24 * 7)) ]; then
        pip install --upgrade pip setuptools wheel
        touch "$(which pip)" # NOTE: ensure mtime is updated
    fi
}

layout_pdm() {
    # Activate PEP 582 (faster equivalent to `pdm --pep582`)
    # FIXME: infer python version
    path_add PYTHONPATH "/usr/local/opt/pdm/libexec/lib/python3.9/site-packages/pdm/pep582/"
    PATH_add "$PWD/__pypackages__/3.9/bin"

    # Install, if needed
    [ -d __pypackages__ ] || pdm install
}

layout auto
