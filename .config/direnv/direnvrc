#!/bin/bash

[ -z "${DIRENV_DEBUG:-}" ] || set -x

# Usage: layout auto
#
# Detects and loads project based on file structure
layout_auto() {
    log_status "detecting layout"
    if [[ -f go.mod ]]; then
        log_status "detected go project"
        use go
        layout go
    elif [[ -f package.json ]]; then
        log_status "detected node project"
        use nodejs
        layout nodejs
    elif [[ -f poetry.lock ]]; then
        log_status "detected poetry project"
        use python
        layout poetry
    elif [[ -f pdm.lock ]]; then
        log_status "detected pdm project"
        layout pdm
    elif [[ -f pyproject.toml || -f setup.py ]]; then
        log_status "detected python project"
        use python
        layout python
    fi
    dotenv_if_exists
}

# Usage: export_alias zz "ls -la" "$PWD/bin"
export_alias() {
    local name=$1 cmd=$2 target=$3
    echo "#!/usr/bin/env bash" >"$target/$name"
    echo "exec $cmd" >>"$target/$name"
    chmod +x "$target/$name"
}

### Go ###

# Usage: use go [<version>]
use_go() {
    version=$(parse_version go.mod 'go[[:space:]](.*)' "$@")
    use_pkgx +go"$version"
}

layout_go() {
    export GOBIN="$PWD/bin"
    PATH_add bin
}

### Node ###

# Usage: use nodejs [<version>]
use_nodejs() {
    version=$(parse_version .nvmrc '(.*)' "$@")
    use_pkgx +node"$version" +npm
}

layout_nodejs() {
    PATH_add node_modules/.bin

    # Install, if deps are outdated
    if [[ -f package-lock.json && package-lock.json -nt node_modules/.package-lock.json ]]; then
        npm install
    elif [[ -f yarn.lock && yarn.lock -nt node_modules ]]; then
        yarn install
    fi
    watch_file package-lock.json yarn.lock
}

### Python ###

# Usage: use python [<version>]
use_python() {
    version=$(parse_version .python-version '(.*)' "$@")
    use_pkgx +python"$version" +pip
}

layout_python() {
    # Activate venv
    export VIRTUAL_ENV="$PWD/.venv"
    PATH_add "$VIRTUAL_ENV/bin"

    # Install
    if [[ ! -d "$VIRTUAL_ENV" ]]; then
        python=$(command -v python3)
        "$python" -m venv "$VIRTUAL_ENV" --without-pip
        echo "*" >"$VIRTUAL_ENV"/.gitignore
        # shellcheck disable=SC2016
        export_alias pip "$python"' -m pip --python="${0%/*}/python" "$@"' "$VIRTUAL_ENV/bin"
        (cd "$VIRTUAL_ENV/bin" && ln -s pip pip3)
        pip3 install -e '.[dev]'
    fi
}

layout_poetry() {
    # Install, if deps are outdated
    if [[ ! -d .venv || poetry.lock -nt "$(echo .venv/lib/python*/site-packages)" ]]; then
        poetry install
    fi
    watch_file poetry.lock

    # Activate venv
    export VIRTUAL_ENV="$PWD/.venv"
    export POETRY_ACTIVE=1
    PATH_add "$VIRTUAL_ENV/bin"
}

layout_pdm() {
    # Install, if deps are outdated
    if [[ ! -d __pypackages__ || pdm.lock -nt "$(echo __pypackages__/*/lib)" ]]; then
        pdm install
    fi
    watch_file pdm.lock

    # Activate PEP 582 (faster equivalent to `pdm --pep582`)
    path_add PYTHONPATH "$HOMEBREW_PREFIX"/opt/pdm/libexec/lib/python*/site-packages/pdm/pep582
    PATH_add "$PWD"/__pypackages__/*/bin
}

### Pkgx ###

# Usage: parse_version <filename> <regex> [version]
#
# Returns a version constraint for pkgx, constructed from either the given version or file
parse_version() {
    version_file=$1
    version_regex=$2
    version=${3:-any}
    via=".envrc"

    if [[ "$version" = "any" && -f "$version_file" && $(<"$version_file") =~ $version_regex ]]; then
        version=${BASH_REMATCH[1]}
        via="$version_file"
    fi

    log_status "resolved version $version (via $via)"
    watch_file "$version_file"
    [[ "$version" = "any" ]] || echo "~${version#v}"
}

# Usage: use pkgx [<pkg> ...]
#
# Loads the given packages
use_pkgx() {
    log_status "using pkgx $*"
    # shellcheck disable=SC2016
    eval "$("${direnv:?}" dotenv bash <(SHELL=bash pkgx --quiet "$@" | sed 's|${PATH:+:$PATH}|:${PATH}|g'))"
}

### Main ###

if [[ ! -s .envrc ]]; then # empty .envrc
    layout auto
fi
